{
  "swagger": "2.0",
  "info": {
    "title": "Spacebox API",
    "description": "for spacebox",
    "version": "1.0"
  },
  "produces": ["application/json", "text/plain"],
  "host": "spacebox-tech.herokuapp.com",
  "basePath": "/",
  "definitions": {
    "position": {
      "type": "object",
      "properties": {
        "x": {
          "type": "number"
        },
        "y": {
          "type": "number"
        },
        "z": {
          "type": "number"
        }
      },
      "required": [ "x", "y", "z" ]
    },
    "uuid": {
      "type": "string",
      "pattern" : "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
    },
    "responseError": {
      "type": "object",
      "properties": {
        "errorDetails": {
          "description": "this really should be rationalized but atm, it could be a string OR an object. Swagger doesn't support this as a schema so it's left undefined"
        }
      }
    },
    "scanWormholesParameters": {
      "type": "object",
      "properties": {
        "vessel": {
          "description": "the uuid of the vessel to scan from",
          "$ref": "#/definitions/uuid"
        }
      },
      "required": [ "vessel" ]
    },
    "unpackItemParameters": {
      "type": "object",
      "properties": {
        "container_id": {
          "description": "the uuid of the container to unpack the item in",
          "$ref": "#/definitions/uuid"
        },
        "blueprint": {
          "description": "the uuid of the blueprint to unpack",
          "$ref": "#/definitions/uuid"
        },
        "slice": {
          "description": "the slice to unpack the item in",
          "type": "string",
          "default": "default"
        }
      },
      "required": [ "container_id", "blueprint", "slice" ]
    
    },
    "shootingParameters": {
      "type": "object",
      "properties": {
        "vessel": {
          "description": "the uuid of the ship to shoot from",
          "$ref": "#/definitions/uuid"
        },
        "target": {
          "description": "the uuid of the target to shoot",
          "$ref": "#/definitions/uuid"
        }
      },
      "required": [ "vessel", "target" ]
    },
    "transferParameters": {
      "type": "object",
      "properties": {
        "from_id": {
          "description": "the uuid of the container to transfer from",
          "$ref": "#/definitions/uuid"
        },
        "from_slice": {
          "description": "the slice to transfer from",
          "type": "string",
          "default": "default"
        },
        "to_id": {
          "description": "the uuid of the container to transfer to",
          "$ref": "#/definitions/uuid"
        },
        "to_slice": {
          "description": "the slice to transfer to",
          "type": "string",
          "default": "default"
        },
        "items": {
          "description": "A list of types OR items to transfer. Types need the `blueprint` and `quantity` fields, items need the `item_uuid` field.",
          "type": "array",
          "items": {
            "description": "either set `blueprint` and `quantity`, or set `item_uuid`",
            "type": "object",
            "properties": {
              "blueprint": {
                "description": "the uuid of a blueprint for the type of non-unique items you want to transfer",
                "$ref": "#/definitions/uuid"
              },
              "quantity": {
                "description": "the number of items of the given blueprint to transfer",
                "type": "number"
              },
              "item_uuid": {
                "description": "the uuid of a unique item to transfer",
                "$ref": "#/definitions/uuid"
              }
            }
          }
        }
      },
      "required": [ "items" ]
    },
    "deployParameters": {
      "type": "object",
      "properties": {
        "container_id": {
          "description": "the uuid of the container to deploy from",
          "$ref": "#/definitions/uuid"
        },
        "slice": {
          "description": "the slice to deploy from",
          "type": "string",
          "default": "default"
        },
        "blueprint": {
          "description": "the uuid of the blueprint to deploy an item of",
          "$ref": "#/definitions/uuid"
        },
        "vessel_uuid": {
          "description": "the uuid of vessel to deploy if a specific one already exists",
          "$ref": "#/definitions/uuid"
        }
      },
      "required": [ "container_id", "blueprint" ]
    },
    "refittingJob": {
      "type": "object",
      "properties": {
        "facility": {
          "description": "the uuid of the facility run the job in",
          "$ref": "#/definitions/uuid"
        },
        "target": {
          "description": "the uuid of the ship to change the modules on",
          "$ref": "#/definitions/uuid"
        },
        "modules": {
          "description": "modules already installed will remain in place, and modules installed not in this list will be removed and placed in inventory. New modules not yet install will be fetched from the inventory",
          "type": "array",
          "items": {
            "description": "A uuid of a module to install",
            "$ref": "#/definitions/uuid"
          }
        },
        "slice": {
          "description": "the name of the container slice to take resources from and put the final result in. Normally you just put `default`",
          "type": "string",
          "default": "default"
        }
      },
      "required": [ "facility", "target", "modules", "slice" ]
    },
    "constructionJob": {
      "type": "object",
      "properties": {
        "facility": {
          "description": "the uuid of the facility run the job in",
          "$ref": "#/definitions/uuid"
        },
        "blueprint": {
          "description": "the uuid of the blueprint you want to remodel the structure into. If you don't want to remodel the structure, specify it's current blueprint uuid",
          "$ref": "#/definitions/uuid"
        },
        "modules": {
          "description": "modules already installed will remain in place, and modules installed not in this list will be removed and placed in inventory. New modules not yet install will be fetched from the inventory",
          "type": "array",
          "items": {
            "description": "A uuid of a module to install",
            "$ref": "#/definitions/uuid"
          }
        },
        "slice": {
          "description": "the name of the container slice to take resources from and put the final result in. Normally you just put `default`",
          "type": "string",
          "default": "default"
        }
      },
      "required": [ "facility", "blueprint", "slice" ]
    },
    "refiningJob": {
      "type": "object",
      "properties": {
        "facility": {
          "description": "the uuid of the facility run the job in",
          "$ref": "#/definitions/uuid"
        },
        "blueprint": {
          "description": "the uuid of the blueprint of the items you want to refine",
          "$ref": "#/definitions/uuid"
        },
        "quantity": {
          "description": "how many of the items you want to build",
          "type": "integer",
          "default": 1
        },
        "slice": {
          "description": "the name of the container slice to take resources from and put the final result in. Normally you just put `default`",
          "type": "string",
          "default": "default"
        }
      },
      "required": [ "facility", "blueprint", "quantity" ]
    },
    "researchJob": {
      "type": "object",
      "properties": {
        "facility": {
          "description": "the uuid of the facility run the job in",
          "$ref": "#/definitions/uuid"
        },
        "blueprint": {
          "description": "the uuid of the blueprint to research",
          "$ref": "#/definitions/uuid"
        },
        "parameter": {
          "description": "the name of the parameter that you want to improve",
          "type": "string"
        },
        "slice": {
          "description": "the name of the container slice to take resources from. Normally you just put `default`",
          "type": "string",
          "default": "default"
        }
      },
      "required": [ "facility", "blueprint", "parameter", "slice" ]
    },
    "manufacturingJob": {
      "type": "object",
      "properties": {
        "facility": {
          "description": "the uuid of the facility run the job in",
          "$ref": "#/definitions/uuid"
        },
        "blueprint": {
          "description": "the uuid of the blueprint to manufacture",
          "$ref": "#/definitions/uuid"
        },
        "quantity": {
          "description": "how many of the items you want to build",
          "type": "integer",
          "default": 1
        },
        "slice": {
          "description": "the name of the container slice to take resources from and put the final result in. Normally you just put `default`",
          "type": "string",
          "default": "default"
        }
      },
      "required": [ "facility", "blueprint" ]
    }
  },
  "securityDefinitions": {
      "swagger-ui-key": {
        "description": "This just defines what the Swagger-UI does so it has to be supported. The preferred method is to pass in the JWT token as a bearer token in the Authorization header.",
        "name": "api_key",
        "type": "apiKey",
        "in": "query"
      }
  },
  "security": [
    {
      "swagger-ui-key": []
    }
  ],
  "responses": {
    "Error": {
      "description": "Any kind of error, not just an internal error",
      "schema": {
        "$ref": "#/definitions/responseError"
      }
    },
    "Empty": {
      "description": "It's a normal empty response, but swagger can't understand that",
      "schema": {
        "type": "string",
        "enum": [ "" ]
      }
    },
    "NotFound": {
      "description": "Couldn't find something you specified",
      "schema": {
        "type": "string"
      }
    }
  },
  "paths": {
    "/commands/scanWormholes": {
      "post": {
        "description": "returns a list of wormholes in the solar system",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "the parameters as json",
            "schema": {
              "$ref": "#/definitions/scanWormholesParameters"
            }
          }
        ],
        "responses": {
          "default": { "$ref": "#/responses/Error" },
          "304": { "$ref": "#/responses/Empty" },
          "404": { "$ref": "#/responses/NotFound" },
          "200": {
            "description": "A job",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "uuid": {
                        "description": "the uuid of the space object in this solar system for the wormhole",
                        "$ref": "#/definitions/uuid"
                      },
                      "position": {
                        "$ref": "#/definitions/position"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/jobs/{uuid}": {
      "post": {
        "tags": [ "jobs" ],
        "description": "Currently the only effect is that the job will be retriggered for processing. When a job fails the backoff is increased and if you fix the error condition, it may be awhile before the job is checked again. Call this endpoint and the job will be checked soon.",
        "parameters": [
          {
            "name": "uuid",
            "description": "the uuid of the job",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "default": { "$ref": "#/responses/Error" },
          "204": {"$ref": "#/responses/Empty" }
        }
      },
      "delete": {
        "tags": [ "jobs" ],
        "description": "If your jobs errors out, you'll need to resolve the error or delete the job before the facility will start processing jobs again. If you delete a job that has already consumed the resources, you won't get them back.",
        "parameters": [
          {
            "name": "uuid",
            "description": "the uuid of the job",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "default": { "$ref": "#/responses/Error" },
          "204": {"$ref": "#/responses/Empty" }
        }
      },
      "get": {
        "tags": [ "jobs" ],
        "description": "returns the details of the job",
        "parameters": [
          {
            "name": "uuid",
            "description": "the uuid of the job",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "default": { "$ref": "#/responses/Error" },
          "304": { "$ref": "#/responses/Empty" },
          "404": { "$ref": "#/responses/NotFound" },
          "200": {
            "description": "A job",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/items": {
      "post": {
        "tags": [ "inventory" ],
        "description": "Unpack a ship to make a unique ship",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "the parameters as json",
            "schema": {
              "$ref": "#/definitions/unpackItemParameters"
            }
          }
        ],
        "responses": {
          "default": { "$ref": "#/responses/Error" },
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "description": "the uuid of the new vessel",
                  "$ref": "#/definitions/uuid"
                }
              }
            }
          }
        }
      }
    
    },
    "/commands/shoot": {
      "post": {
        "tags": [ "spaceObjects" ],
        "description": "Tell a vessel to shoot a target until it's destroyed",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "the parameters as json",
            "schema": {
              "$ref": "#/definitions/shootingParameters"
            }
          }
        ],
        "responses": {
          "default": { "$ref": "#/responses/Error" },
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "boolean",
                  "enum": [ true ]
                }
              }
            }
          }
        }
      }
    },
    "/commands/deploy": {
      "post": {
        "tags": [ "spaceObjects" ],
        "description": "deploy a vessel from inventory to space",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "the parameters as json",
            "schema": {
              "$ref": "#/definitions/deployParameters"
            }
          }
        ],
        "responses": {
          "default": { "$ref": "#/responses/Error" },
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "description": "the uuid of the new vessel",
                  "$ref": "#/definitions/uuid"
                }
              }
            }
          }
        }
      }
    },
    "/facilities/{uuid}": {
      "delete": {
        "tags": [ "facilities" ],
        "description": "delete facilities that you uninstalled during a refit or construction. You can only delete disabled facilities. Deleting a facility cancels any jobs running there. Cancelling a job you lose both the output and the input, that may change in the future.",
        "parameters": [
          {
            "name": "uuid",
            "description": "the uuid of the blueprint you want",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "default": { "$ref": "#/responses/Error" },
          "204": { "$ref": "#/responses/Empty" }
        }
      }
    },
    "/facilities": {
      "post": {
        "tags": [ "facilities" ],
        "description": "re-enable any facilities that were disabled during refitting or construction",
        "parameters": [],
        "responses": {
          "default": { "$ref": "#/responses/Error" },
          "200": {
            "description": "Facilities",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      },
      "get": {
        "tags": [ "facilities" ],
        "description": "get a list of all your facilities that you can run jobs in",
        "parameters": [],
        "responses": {
          "default": { "$ref": "#/responses/Error" },
          "304": { "$ref": "#/responses/Empty" },
          "200": {
            "description": "Facilities",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/jobs": {
      "get": {
        "tags": [ "jobs" ],
        "description": "get a list of all your jobs, past and present. There is no garbage collection yet",
        "parameters": [],
        "responses": {
          "default": { "$ref": "#/responses/Error" },
          "304": { "$ref": "#/responses/Empty" },
          "200": {
            "description": "Jobs",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      },
      "post": {
        "deprecated": true,
        "tags": [ "jobs" ],
        "description": "start a job",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "the parameters to the job as json",
            "schema": {
              "type": "object",
              "properties": {
                "facility": {
                  "description": "the uuid of the facility run the job in",
                  "$ref": "#/definitions/uuid"
                },
                "action": {
                  "type": "string",
                  "enum": [ "construction", "refining", "refitting", "research", "manufacturing" ]
                }
              }
            }
          }
        ],
        "responses": {
          "default": { "$ref": "#/responses/Error" },
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "properties": {
                "job": {
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "description": "the uuid of the job",
                      "$ref": "#/definitions/uuid"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/jobs/construction": {
      "post": {
        "tags": [ "jobs" ],
        "description": "start a construction job. This can change the blueprint of the structure and/or change the installed modules.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "the parameters to the job as json",
            "schema": {
              "$ref": "#/definitions/constructionJob"
            }
          }
        ],
        "responses": {
          "default": { "$ref": "#/responses/Error" },
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "properties": {
                "job": {
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "description": "the uuid of the job",
                      "$ref": "#/definitions/uuid"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/jobs/refitting": {
      "post": {
        "tags": [ "jobs" ],
        "description": "start a refitting job. That takes a ship in inventory and changes it's installed modules.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "the parameters to the job as json",
            "schema": {
              "$ref": "#/definitions/refittingJob"
            }
          }
        ],
        "responses": {
          "default": { "$ref": "#/responses/Error" },
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "properties": {
                "job": {
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "description": "the uuid of the job",
                      "$ref": "#/definitions/uuid"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/jobs/refining": {
      "post": {
        "tags": [ "jobs" ],
        "description": "start a refining job. That changes Ore into Metal.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "the parameters to the job as json",
            "schema": {
              "$ref": "#/definitions/refiningJob"
            }
          }
        ],
        "responses": {
          "default": { "$ref": "#/responses/Error" },
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "properties": {
                "job": {
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "description": "the uuid of the job",
                      "$ref": "#/definitions/uuid"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/jobs/research": {
      "post": {
        "tags": [ "jobs" ],
        "description": "start a research job. When the job completes you'll have a new blueprint in your list with the parameter specified improved. The job consumes resources from the inventory to do the research.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "the parameters to the job as json",
            "schema": {
              "$ref": "#/definitions/researchJob"
            }
          }
        ],
        "responses": {
          "default": { "$ref": "#/responses/Error" },
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "properties": {
                "job": {
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "description": "the uuid of the job",
                      "$ref": "#/definitions/uuid"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/jobs/manufacturing": {
      "post": {
        "tags": [ "jobs" ],
        "description": "start a manufacturing job",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "the parameters to the job as json",
            "schema": {
              "$ref": "#/definitions/manufacturingJob"
            }
          }
        ],
        "responses": {
          "default": { "$ref": "#/responses/Error" },
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "properties": {
                "job": {
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "description": "the uuid of the job",
                      "$ref": "#/definitions/uuid"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/techs/{name}": {
      "get": {
        "tags": [ "blueprints" ],
        "description": "return the details for the given technology",
        "parameters": [
          {
            "name": "name",
            "description": "the name of the technology",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": { "$ref": "#/responses/Error" },
          "304": { "$ref": "#/responses/Empty" },
          "404": { "$ref": "#/responses/NotFound" },
          "200": {
            "description": "A blueprint",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/blueprints/{uuid}": {
      "get": {
        "tags": [ "blueprints" ],
        "description": "get a specific blueprint you have access to",
        "parameters": [
          {
            "name": "uuid",
            "description": "the uuid of the blueprint you want",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "default": { "$ref": "#/responses/Error" },
          "304": { "$ref": "#/responses/Empty" },
          "404": { "$ref": "#/responses/NotFound" },
          "200": {
            "description": "A blueprint",
            "schema": {
              "type": "object",
              "properties": {
                "uuid": {
                  "$ref": "#/definitions/uuid"
                }
              }
            }
          }
        }
      }
    },
    "/blueprints": {
      "get": {
        "tags": [ "blueprints" ],
        "description": "Get all the blueprints you have access to.",
        "parameters": [],
        "responses": {
          "default": { "$ref": "#/responses/Error" },
          "304": { "$ref": "#/responses/Empty" },
          "200": {
            "description": "Blueprints",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/specs": {
      "get": {
        "description": "Get information about the game configuration",
        "parameters": [],
        "responses": {
          "default": { "$ref": "#/responses/Error" },
          "304": { "$ref": "#/responses/Empty" },
          "200": {
            "description": "Game data",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/commands/spawnStarter": {
      "post": {
        "tags": [ "spaceObjects" ],
        "description": "spawns a starter ship, only works if you have no game assets",
        "parameters": [],
        "responses": {
          "default": { "$ref": "#/responses/Error" },
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "description": "the uuid of the starter ship",
                  "$ref": "#/definitions/uuid"
                }
              }
            }
          }
        }
      }
    },
    "/commands/resetAgent": {
      "post": {
        "tags": [ "spaceObjects" ],
        "description": "If you've played with stuff before, you may want to reset your agent's game state to wipe it clean. This will delete any ships, structures, inventories, etc in the game universe for this agent.",
        "parameters": [],
        "responses": {
          "default": { "$ref": "#/responses/Error" },
          "200": {
            "description": "success",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "boolean",
                  "enum": [ true ]
                }
              }
            }
          }
        }
      }
    },
    "/inventory/{uuid}": {
      "get": {
        "tags": [ "inventory" ],
        "description": "get a specific container you have access to. this one will include a list of all the unique items in the container also.",
        "parameters": [
          {
            "name": "uuid",
            "description": "the uuid of the container you want",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "default": { "$ref": "#/responses/Error" },
          "304": { "$ref": "#/responses/Empty" },
          "404": { "$ref": "#/responses/NotFound" },
          "200": {
            "description": "A specific container",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/inventory": {
      "post": {
        "tags": [ "inventory" ],
        "description": "transfer contents from one inventory to another. If you leave the `to_*` fields blank the transfered items will be deleted. If you have NPC credentials you can leave the `from_*` fields blank to add items to a container.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "the parameters as json",
            "schema": {
              "$ref": "#/definitions/transferParameters"
            }
          }
        
        ],
        "responses": {
          "default": { "$ref": "#/responses/Error" },
          "204": { "$ref": "#/responses/Empty" }
        }
      },
      "get": {
        "tags": [ "inventory" ],
        "description": "Returns all your inventories. This might change if it gets too expensive. It's not currently paginated.",
        "parameters": [],
        "responses": {
          "default": { "$ref": "#/responses/Error" },
          "304": { "$ref": "#/responses/Empty" },
          "200": {
            "description": "a list of inventories",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    }
  }
}
